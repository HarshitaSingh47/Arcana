(function () {
    'use strict';

    function configureRoutes($routeProvider) {
        $routeProvider.when('/', {
            templateUrl: '/app/home/home.html',
            controller: 'home',
            controllerAs: 'vm'
        });

        /*
        $routeProvider.when('/login', {
            templateUrl: '/app/auth/login.html',
            controller: 'login',
            controllerAs: 'vm'
        });

        $routeProvider.when('/register', {
            templateUrl: '/app/auth/register.html',
            controller: 'register',
            controllerAs: 'vm'
        });

        $routeProvider.when('/profile', {
            templateUrl: '/app/auth/profile.html',
            controller: 'profile',
            controllerAs: 'vm'
        });
        */

        $routeProvider.when('/cards', {
            templateUrl: '/app/cards/cards.html',
            controller: 'cards',
            controllerAs: 'vm'
        });

        $routeProvider.when('/decks', {
            templateUrl: '/app/decks/decks.html',
            controller: 'decks',
            controllerAs: 'vm'
        });

        $routeProvider.when('/deckbuilder', {
            templateUrl: '/app/deckbuilder/deckbuilder.html',
            controller: 'deckbuilder',
            controllerAs: 'vm'
        });

        $routeProvider.when('/store', {
            templateUrl: '/app/store/store.html',
            controller: 'store',
            controllerAs: 'vm'
        });

        $routeProvider.when('/admin/cards', {
            templateUrl: '/app/admin/cards/adminCards.html',
            controller: 'adminCards',
            controllerAs: 'vm'
        });

        $routeProvider.when('/admin/cards/add', {
            templateUrl: '/app/admin/cards/adminAddCard.html',
            controller: 'adminAddCard',
            controllerAs: 'vm'
        });

        $routeProvider.when('/admin/cards/edit/:cardId', {
            templateUrl: '/app/admin/cards/adminEditCard.html',
            controller: 'adminEditCard',
            controllerAs: 'vm',
            resolve: {
                cardId: ['$route', function ($route) {
                    return $route.current.params.cardId;
                }]
            }
        });

        $routeProvider.when('/admin/cards/copy/:cardId', {
            templateUrl: '/app/admin/cards/adminCopyCard.html',
            controller: 'adminCopyCard',
            controllerAs: 'vm',
            resolve: {
                cardId: ['$route', function ($route) {
                    return $route.current.params.cardId;
                }]
            }
        });

        $routeProvider.when('/admin/decks', {
            templateUrl: '/app/admin/decks/adminDecks.html',
            controller: 'adminDecks',
            controllerAs: 'vm'
        });

        $routeProvider.when('/admin/decks/add', {
            templateUrl: '/app/admin/decks/adminAddDeck.html',
            controller: 'adminAddDeck',
            controllerAs: 'vm'
        });

        $routeProvider.when('/admin/decks/edit/:deckId', {
            templateUrl: '/app/admin/decks/adminEditDeck.html',
            controller: 'adminEditDeck',
            controllerAs: 'vm',
            resolve: {
                deckId: ['$route', function ($route) {
                    return $route.current.params.deckId;
                }]
            }
        });
    }
    configureRoutes.$inject = ['$routeProvider'];

    function onAppRun($rootScope, $location) {
        /*jslint unparam: true*/
        $rootScope.$on('$routeChangeError', function (event, next, previous, error) {
            if (error === 'AUTH_REQUIRED') {
                var redirPath = next.$$route.originalPath;
                $location.path('/login').search('redirect', redirPath);
            }
        });
        /*jslint unparam: false*/
    }
    onAppRun.$inject = ['$rootScope', '$location'];

    angular.module('arcana', ['ngRoute', 'ngAnimate', 'firebase', 'ui.bootstrap'])
        .constant('FIREBASE_URL', 'https://glaring-heat-7532.firebaseio.com/')
        .config(configureRoutes)
        .run(onAppRun);
}());
(function () {
    'use strict';

    function login($location, authService) {
        var vm = this;

        vm.emailAddress = '';
        vm.password = '';
        vm.errorMessage = '';

        vm.login = function () {
            var urlParams = $location.search(),
                redirect = urlParams.redirect || '/',
                model = {
                    email: vm.emailAddress,
                    password: vm.password
                };

            authService.login(model).then(function (authData) {
                if (authData) {
                    $location.search('redirect', null);
                    $location.path(redirect);
                }
            }).catch(function (error) {
                vm.errorMessage = 'Username or password invalid';
            });
        };
    }
    login.$inject = ['$location', 'authService'];

    angular.module('arcana').controller('login', login);
}());
(function () {
    'use strict';

    function register($location, authService) {
        var vm = this;

        vm.emailAddress = '';
        vm.username = '';
        vm.password = '';
        vm.errorMessage = '';

        vm.register = function () {
            var model = {
                email: vm.emailAddress,
                password: vm.password,
                username: vm.username
            };

            // Returns an ASQ object so we can catch any failures
            authService.createUser(model).then(function () {
                $location.path('/');
            }).or(function (error) {
                if (error.code === 'EMAIL_TAKEN') {
                    vm.errorMessage = 'That email is already in use. Please choose another.';
                } else if (error.code === 'USERNAME_TAKEN') {
                    vm.errorMessage = 'That username is already in use. Please choose another.';
                }
            });
        };
    }
    register.$inject = ['$location', 'authService'];

    angular.module('arcana').controller('register', register);
}());
(function () {
    'use strict';

    function cards() {
        var vm = this;
        vm.message = 'test';
    }
    cards.$inject = [];

    angular.module('arcana').controller('cards', cards);
}());
(function () {
    'use strict';

    function deckbuilder() {
        var vm = this;
        vm.message = '';
    }
    deckbuilder.$inject = [];

    angular.module('arcana').controller('deckbuilder', deckbuilder);
}());
(function () {
    'use strict';

    function decks() {
        var vm = this;
        vm.message = 'test';
    }
    decks.$inject = [];

    angular.module('arcana').controller('decks', decks);
}());
(function () {
    'use strict';

    function home($rootScope, authService) {
        var vm = this;
        vm.currentUser = null;

        $rootScope.$on('USER_AUTHENTICATED', function (ev, user) {
            vm.currentUser = user;
        });

        $rootScope.$on('USER_UNAUTHENTICATED', function () {
            vm.currentUser = null;
        });
    }
    home.$inject = ['$rootScope', 'authService'];

    angular.module('arcana').controller('home', home);
}());
(function () {
    'use strict';

    function authService($firebaseAuth, $firebaseObject, $firebaseArray) {
        var fbRef = new Firebase('https://glaring-heat-7532.firebaseio.com/'),
            fbAuth = $firebaseAuth(fbRef);

        function login(model) {
            return fbAuth.$authWithPassword(model);
        }

        function logout() {
            fbAuth.$unauth();
        }

        /*
        function getUserByUsername(username) {

        }
        */

        function getUser(uid) {
            return $firebaseObject(fbRef.child('users').child(uid)).$loaded();
        }

        function createUser(userInfo) {
            return ASQ(userInfo).then(function (next, userInfo) {
                fbAuth.$createUser(userInfo).then(function (userData) {
                    userInfo.uid = userData.uid;
                    next(userInfo);
                }).catch(function (error) {
                    next.fail(error);
                });
            }).then(function (next, userInfo) {
                $firebaseArray(fbRef.child('users')).$add({
                    username: userInfo.username,
                    email: userInfo.email
                }).then(function () {
                    next(userInfo);
                });
            }).then(function (next, userInfo) {
                fbAuth.$authWithPassword(userInfo);
                next();
            });
        }

        return {
            login: login,
            logout: logout,
            getUser: getUser,
            createUser: createUser
        };
    }
    authService.$inject = ['$firebaseAuth', '$firebaseObject', '$firebaseArray'];

    angular.module('arcana').factory('authService', authService);
}());
(function () {
    'use strict';

    function highlightActive() {
        /*jslint unparam: true*/
        function controller($scope, $element, $attrs, $location) {
            var links = $element.find('a'),
                path = function () {
                    return $location.path();
                },
                highlight = function (links, path) {
                    path = '#' + path;
                    return angular.forEach(links, function (link) {
                        var $link = angular.element(link),
                            $li = $link.parent('li'),
                            href = $link.attr('href');

                        if ($li.hasClass('active')) {
                            $li.removeClass('active');
                        }

                        if (path === href) {
                            return $li.addClass('active');
                        }
                    });
                };

            highlight(links, $location.path());
            return $scope.$watch(path, function (newVal, oldVal) {
                if (newVal === oldVal) {
                    return;
                }

                return highlight(links, $location.path());
            });
        }
        /*jslint unparam: false*/
        controller.$inject = ['$scope', '$element', '$attrs', '$location'];

        return {
            restrict: 'A',
            controller: controller
        };
    }

    function customPage() {
        function controller($scope, $element, $location) {
            var path = function () {
                    return $location.path();
                },
                addBg = function (path) {
                    $element.removeClass('body-wide body-err body-lock body-auth');
                    switch (path) {
                        case '/login':
                        case '/register':
                            return $element.addClass('body-wide body-auth');
                        default:
                            break;
                    }
                };

            addBg($location.path());
            return $scope.$watch(path, function (newVal, oldVal) {
                if (newVal === oldVal) {
                    return;
                }

                return addBg($location.path());
            });
        }
        controller.$inject = ['$scope', '$element', '$location'];

        return {
            restrict: 'A',
            controller: controller
        };
    }

    angular.module('arcana')
        .directive('highlightActive', highlightActive)
        .directive('customPage', customPage);
}());
(function () {
    'use strict';

    function userService($q) {
        var usersRef = new Firebase('https://glaring-heat-7532.firebaseio.com/').child('users');

        function createUserProfile(userInfo) {
            usersRef.child(userInfo.uid).set({
                username: userInfo.username,
                email: userInfo.email
            });
        }

        function getUserProfile(uid) {
            var deferred = $q.defer();

            usersRef.child(uid).on('value', function (userRef) {
                var user = userRef.val();
                deferred.resolve(user);
            });

            return deferred.promise;
        }

        return {
            createUserProfile: createUserProfile,
            getUserProfile: getUserProfile
        };
    }
    userService.$inject = ['$q'];

    angular.module('arcana').factory('userService', userService);
}());
(function () {
    'use strict';

    function store() {
        var vm = this;
        vm.message = '';
    }
    store.$inject = [];

    angular.module('arcana').controller('store', store);
}());
(function () {
    'use strict';

    function adminAddCard($modalInstance, $firebaseArray, FIREBASE_URL) {
        var vm = this,
            fbRef = new Firebase(FIREBASE_URL + '/cards');

        vm.card = {
            cardName: '',
            cardType: 'Battery',
            rarity: 'Normal',
            instanceCost: 0,
            maintenanceCost: 0,
            genValue: 0,
            burnValue: 0,
            health: 0,
            power: 0,
            description: '',
            flavorText: ''
        };

        vm.cardTypes = ['Creature', 'Battery', 'Modifier', 'Sorcery'];
        vm.creatureTypes = ['Organic', 'Mystical'];
        vm.rarities = ['Normal', 'Uncommon', 'Rare', 'Epic', 'Legendary'];

        vm.submit = function () {
            /*jslint nomen:true*/
            var cardRef = fbRef.child(vm.card.cardType.toLowerCase()),
                card = _.pick(vm.card, ['cardName', 'rarity', 'instanceCost', 'maintenanceCost', 'genValue', 'burnValue', 'health', 'power', 'description', 'flavorText']);
            /*jslint nomen:false*/
            $firebaseArray(cardRef).$add(card).then(function () {
                $modalInstance.close();
            });
        };

        vm.cancel = function () {
            $modalInstance.close();
        };
    }
    adminAddCard.$inject = ['$modalInstance', '$firebaseArray', 'FIREBASE_URL'];

    angular.module('arcana').controller('adminAddCard', adminAddCard);
}());
(function () {
    'use strict';

    function adminCards($modal, $firebaseArray, FIREBASE_URL) {
        var vm = this,
            fbRef = new Firebase(FIREBASE_URL + '/cards');

        $firebaseArray(fbRef).$loaded(function (data) {
            vm.cards = data;
        });

        vm.addCard = function () {
            $modal.open({
                templateUrl: '/app/admin/cards/adminAddCard.html',
                controller: 'adminAddCard',
                controllerAs: 'vm'
            });
        };
    }
    adminCards.$inject = ['$modal', '$firebaseArray', 'FIREBASE_URL'];

    angular.module('arcana').controller('adminCards', adminCards);
}());
(function () {
    'use strict';

    function adminCopyCard($location, $firebaseObject, $firebaseArray, FIREBASE_URL, cardId) {
        var vm = this,
            fbRef = new Firebase(FIREBASE_URL + '/cards');

        $firebaseObject(fbRef.child(cardId)).$loaded(function (data) {
            vm.card = data;
        });

        vm.cardTypes = ['Creature', 'Battery', 'Modifier', 'Sorcery'];
        vm.rarities = ['Normal', 'Uncommon', 'Rare', 'Epic', 'Legendary'];

        vm.submit = function () {
            /*jslint nomen:true*/
            var card = _.pick(vm.card, ['cardName', 'instanceCost', 'maintenanceCost', 'genValue', 'burnValue', 'health', 'power', 'description', 'flavorText']);
            /*jslint nomen:false*/
            $firebaseArray(fbRef).$add(card).then(function () {
                $location.path('/admin/cards');
            });
        };

        vm.cancel = function () {
            $location.path('/admin/cards');
        };
    }
    adminCopyCard.$inject = ['$location', '$firebaseObject', '$firebaseArray', 'FIREBASE_URL', 'cardId'];

    angular.module('arcana').controller('adminCopyCard', adminCopyCard);
}());
(function () {
    'use strict';

    function adminEditCard($modalInstance, card) {
        var vm = this;

        vm.card = card;
        vm.title = 'Update Card - ' + vm.card.cardName;
        vm.creatureTypes = ['Organic', 'Mystical'];
        vm.rarities = ['Normal', 'Uncommon', 'Rare', 'Epic', 'Legendary'];

        vm.submit = function () {
            vm.card.$save().then(function () {
                $modalInstance.close();
            });
        };

        vm.cancel = function () {
            $modalInstance.close();
        };
    }
    adminEditCard.$inject = ['$modalInstance', 'card'];

    angular.module('arcana').controller('adminEditCard', adminEditCard);
}());
(function () {
    'use strict';

    function adminAddDeck($firebaseObject) {
        var vm = this;
        vm.message = 'test';
    }
    adminAddDeck.$inject = ['$firebaseObject'];

    angular.module('arcana').controller('adminAddDeck', adminAddDeck);
}());
(function () {
    'use strict';

    function adminDecks($firebaseArray, $firebaseObject) {
        var vm = this;
        vm.message = 'test';
    }
    adminDecks.$inject = ['$firebaseArray', '$firebaseObject'];

    angular.module('arcana').controller('adminDecks', adminDecks);
}());
(function () {
    'use strict';

    function adminEditDeck($firebaseObject, deckId) {
        var vm = this;
        vm.deckId = deckId;
    }
    adminEditDeck.$inject = ['$firebaseObject', 'deckId'];

    angular.module('arcana').controller('adminEditDeck', adminEditDeck);
}());
(function () {
    'use strict';

    function batteryCards($modal, $firebaseArray, $firebaseObject, FIREBASE_URL) {
        var batteryCardsCtrl = this,
            fbRef = new Firebase(FIREBASE_URL + '/cards/battery');

        $firebaseArray(fbRef).$loaded(function (data) {
            batteryCardsCtrl.cards = data;
        });

        batteryCardsCtrl.editCard = function (cardId) {
            $firebaseObject(fbRef.child(cardId)).$loaded(function (data) {
                $modal.open({
                    templateUrl: '/app/admin/cards/adminEditCard.html',
                    controller: 'adminEditCard',
                    controllerAs: 'vm',
                    resolve: {
                        card: function () {
                            return data;
                        }
                    }
                });
            });
        };

        batteryCardsCtrl.copyCard = function (cardId) {

        };

        batteryCardsCtrl.deleteCard = function (cardId) {
            $firebaseObject(fbRef.child(cardId)).$remove();
        };
    }
    batteryCards.$inject = ['$modal', '$firebaseArray', '$firebaseObject', 'FIREBASE_URL'];

    angular.module('arcana').controller('batteryCards', batteryCards);
}());